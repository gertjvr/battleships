{
  "version": 3,
  "sources": ["../../../../engine/dist/index.js", "../../../dist/game-room.js", "../../../dist/index.js", "../../../../node_modules/.pnpm/wrangler@4.33.2_@cloudflare+workers-types@4.20250903.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../node_modules/.pnpm/wrangler@4.33.2_@cloudflare+workers-types@4.20250903.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-A7lEBl/middleware-insertion-facade.js", "../../../../node_modules/.pnpm/wrangler@4.33.2_@cloudflare+workers-types@4.20250903.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-A7lEBl/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/worker/.wrangler/tmp/dev-jUhkKQ",
  "sourcesContent": ["export const FLEET_SIZES = [5, 4, 3, 3, 2, 2];\nexport function keyOf(c) {\n    return `${c.r},${c.c}`;\n}\nexport function inBounds(c) {\n    return c.r >= 0 && c.r < 10 && c.c >= 0 && c.c < 10;\n}\nexport function coordsFor(start, size, orientation) {\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const r = orientation === 'H' ? start.r : start.r + i;\n        const c = orientation === 'H' ? start.c + i : start.c;\n        result.push({ r, c });\n    }\n    return result;\n}\nexport function fleetHasAt(fleet, target) {\n    const k = keyOf(target);\n    for (const ship of fleet) {\n        if (ship.coords.some((c) => keyOf(c) === k))\n            return ship;\n    }\n    return undefined;\n}\nexport function canPlace(fleet, start, size, orientation) {\n    const coords = coordsFor(start, size, orientation);\n    // bounds\n    if (!coords.every(inBounds))\n        return false;\n    // overlap\n    for (const c of coords) {\n        if (fleetHasAt(fleet, c))\n            return false;\n    }\n    return true;\n}\nexport function placeShip(fleet, start, size, orientation) {\n    if (!canPlace(fleet, start, size, orientation))\n        return fleet;\n    const id = `S${fleet.length + 1}`;\n    const ship = { id, size, coords: coordsFor(start, size, orientation), hits: new Set() };\n    return [...fleet, ship];\n}\nexport function isSunk(ship) {\n    return ship.coords.every((c) => ship.hits.has(keyOf(c)));\n}\nexport function allSunk(fleet) {\n    return fleet.length > 0 && fleet.every(isSunk);\n}\nexport function fire(attackerShots, defenderFleet, target) {\n    const k = keyOf(target);\n    if (attackerShots.has(k)) {\n        // No-op repeat; return current state\n        return { attackerShots: new Set(attackerShots), defenderFleet: defenderFleet.map(cloneShip), result: { hit: fleetHasAt(defenderFleet, target) ? true : false } };\n    }\n    const shots = new Set(attackerShots);\n    shots.add(k);\n    let hit = false;\n    let sunk;\n    const nextFleet = defenderFleet.map(cloneShip);\n    const ship = fleetHasAt(nextFleet, target);\n    if (ship) {\n        hit = true;\n        ship.hits.add(k);\n        if (isSunk(ship))\n            sunk = ship.id;\n    }\n    const win = allSunk(nextFleet);\n    return { attackerShots: shots, defenderFleet: nextFleet, result: { hit, sunk, win } };\n}\nfunction cloneShip(s) {\n    return { id: s.id, size: s.size, coords: s.coords.map((c) => ({ ...c })), hits: new Set(s.hits) };\n}\n", "import { canPlace, fire, FLEET_SIZES, placeShip } from '@app/engine';\nexport class GameRoom {\n    state;\n    env;\n    connections = new Set();\n    gameState = null;\n    playerSessions = new Map(); // sessionToken \u2192 player\n    sessions = new WeakMap(); // WebSocket \u2192 sessionToken\n    recentActions = new Set(); // Last 100 action IDs\n    constructor(state, env) {\n        this.state = state;\n        this.env = env;\n    }\n    async init() {\n        const stored = await this.state.storage.get('snapshot');\n        this.gameState = stored ? this.deserializeState(stored) : this.createInitialState();\n    }\n    async fetch(request) {\n        if (request.headers.get('Upgrade') === 'websocket') {\n            const pair = new WebSocketPair();\n            const [client, server] = [pair[0], pair[1]];\n            await this.handleSession(server);\n            return new Response(null, { status: 101, webSocket: client });\n        }\n        return new Response('Not found', { status: 404 });\n    }\n    async handleSession(ws) {\n        ws.accept();\n        this.connections.add(ws);\n        if (!this.gameState) {\n            await this.init();\n        }\n        ws.addEventListener('message', async (event) => {\n            try {\n                const msg = JSON.parse(event.data.toString());\n                // Check for duplicate actions\n                if (msg.id && this.recentActions.has(msg.id)) {\n                    return; // Drop duplicate silently\n                }\n                if (msg.id) {\n                    this.recentActions.add(msg.id);\n                    // Keep only last 100 IDs\n                    if (this.recentActions.size > 100) {\n                        const first = this.recentActions.values().next().value;\n                        if (first) {\n                            this.recentActions.delete(first);\n                        }\n                    }\n                }\n                await this.handleMessage(ws, msg);\n            }\n            catch (error) {\n                ws.send(JSON.stringify({\n                    type: 'error',\n                    payload: { code: 'BAD_MESSAGE', message: 'Invalid message format' }\n                }));\n            }\n        });\n        ws.addEventListener('close', () => {\n            this.connections.delete(ws);\n        });\n    }\n    async handleMessage(ws, msg) {\n        switch (msg.type) {\n            case 'join':\n                await this.handleJoin(ws, msg.payload);\n                break;\n            case 'action':\n                await this.handleAction(ws, msg);\n                break;\n            case 'ping':\n                ws.send(JSON.stringify({ type: 'pong', id: msg.id }));\n                break;\n        }\n    }\n    async handleJoin(ws, payload) {\n        let player;\n        let sessionToken = payload.sessionToken;\n        if (sessionToken && this.playerSessions.has(sessionToken)) {\n            // Reconnecting player\n            player = this.playerSessions.get(sessionToken);\n        }\n        else {\n            // New player assignment\n            const assignedPlayers = new Set(this.playerSessions.values());\n            if (!assignedPlayers.has(1)) {\n                player = 1;\n            }\n            else if (!assignedPlayers.has(2)) {\n                player = 2;\n            }\n            else {\n                ws.send(JSON.stringify({\n                    type: 'error',\n                    payload: { code: 'ROOM_FULL', message: 'Room full' }\n                }));\n                return;\n            }\n            sessionToken = crypto.randomUUID();\n            this.playerSessions.set(sessionToken, player);\n        }\n        // Map WebSocket to sessionToken for later lookup\n        this.sessions.set(ws, sessionToken);\n        // Send current state snapshot\n        const snapshot = this.gameState || this.createInitialState();\n        ws.send(JSON.stringify({\n            type: 'state',\n            payload: this.serializeState(snapshot),\n            meta: { player, sessionToken }\n        }));\n    }\n    async handleAction(ws, msg) {\n        const { payload, id } = msg;\n        const sessionToken = this.sessions.get(ws);\n        const player = sessionToken ? this.playerSessions.get(sessionToken) : null;\n        // Validate action ownership\n        if (!player || payload.player !== player) {\n            ws.send(JSON.stringify({\n                type: 'error',\n                payload: { code: 'INVALID_PLAYER', message: 'Action not allowed for this player' }\n            }));\n            return;\n        }\n        // Validate action based on type and game phase\n        let isValid = false;\n        switch (payload.type) {\n            case 'place':\n                isValid = this.validatePlacement(payload);\n                break;\n            case 'fire':\n                isValid = this.validateFire(payload);\n                break;\n            case 'donePlacement':\n                isValid = this.validateDonePlacement(payload);\n                break;\n            case 'reset':\n                isValid = true; // Allow reset from any player\n                break;\n            case 'setName':\n                isValid = true; // Allow name setting\n                break;\n            case 'setOrientation':\n                isValid = this.validateSetOrientation(payload);\n                break;\n            case 'undo':\n                isValid = this.validateUndo(payload);\n                break;\n        }\n        if (!isValid) {\n            ws.send(JSON.stringify({\n                type: 'error',\n                payload: { code: 'INVALID_ACTION', message: 'Invalid action' }\n            }));\n            return;\n        }\n        // Apply action and broadcast to all clients with ack\n        this.gameState = this.applyAction(this.gameState, payload);\n        const snapshot = this.serializeState(this.gameState);\n        await this.state.storage.put('snapshot', snapshot);\n        // Acknowledge action id for idempotency\n        this.broadcast({ type: 'action', id, payload, meta: { ack: true } });\n        // Also broadcast updated state so all clients sync to authoritative version\n        this.broadcast({ type: 'state', payload: snapshot });\n    }\n    validatePlacement(payload) {\n        const { phase } = this.gameState;\n        const { player, start, size, orientation } = payload;\n        // Only allow placement during BOTH_PLACE phase\n        if (phase !== 'BOTH_PLACE') {\n            return false;\n        }\n        // Check if player is already ready\n        const isPlayerReady = player === 1 ? this.gameState.p1Ready : this.gameState.p2Ready;\n        if (isPlayerReady) {\n            return false; // Don't allow placing ships after marked as ready\n        }\n        // Get player's fleet and validate using engine function\n        const fleet = player === 1 ? this.gameState.p1.fleet : this.gameState.p2.fleet;\n        return canPlace(fleet, start, size, orientation);\n    }\n    validateFire(payload) {\n        const { phase } = this.gameState;\n        const { player, r, c } = payload;\n        // Only allow firing during correct turn\n        if ((player === 1 && phase !== 'P1_TURN') ||\n            (player === 2 && phase !== 'P2_TURN')) {\n            return false;\n        }\n        // Check if position already fired at using attacker's shot Set\n        const attacker = player === 1 ? this.gameState.p1 : this.gameState.p2;\n        return !attacker.shots.has(`${r},${c}`);\n    }\n    validateDonePlacement(payload) {\n        const { phase } = this.gameState;\n        const { player } = payload;\n        // Only allow during placement phase\n        if (phase !== 'BOTH_PLACE') {\n            return false;\n        }\n        // Check if player is already ready\n        const isPlayerReady = player === 1 ? this.gameState.p1Ready : this.gameState.p2Ready;\n        if (isPlayerReady) {\n            return false; // Already marked as ready\n        }\n        // Check if all ships are placed for this player using FLEET_SIZES\n        const playerData = player === 1 ? this.gameState.p1 : this.gameState.p2;\n        return playerData.fleet.length === FLEET_SIZES.length; // All 6 ships placed\n    }\n    validateSetOrientation(payload) {\n        const { phase } = this.gameState;\n        const { player } = payload;\n        // Only allow during placement phase\n        if (phase !== 'BOTH_PLACE') {\n            return false;\n        }\n        // Check if player is already ready\n        const isPlayerReady = player === 1 ? this.gameState.p1Ready : this.gameState.p2Ready;\n        if (isPlayerReady) {\n            return false; // Already marked as ready, no more changes allowed\n        }\n        return true;\n    }\n    validateUndo(payload) {\n        const { phase } = this.gameState;\n        const { player } = payload;\n        // Only allow during placement phase\n        if (phase !== 'BOTH_PLACE') {\n            return false;\n        }\n        // Check if player is already ready\n        const isPlayerReady = player === 1 ? this.gameState.p1Ready : this.gameState.p2Ready;\n        if (isPlayerReady) {\n            return false; // Already marked as ready, no more changes allowed\n        }\n        // Check if player has any ships to undo\n        const playerData = player === 1 ? this.gameState.p1 : this.gameState.p2;\n        if (playerData.fleet.length === 0) {\n            return false; // No ships to undo\n        }\n        return true;\n    }\n    applyAction(state, payload) {\n        const newState = { ...state };\n        switch (payload.type) {\n            case 'place': {\n                const { player, start, size, orientation } = payload;\n                const fleet = player === 1 ? newState.p1.fleet : newState.p2.fleet;\n                const newFleet = placeShip(fleet, start, size, orientation);\n                if (player === 1) {\n                    newState.p1 = { ...newState.p1, fleet: newFleet };\n                    newState.p1PlaceIndex++;\n                }\n                else {\n                    newState.p2 = { ...newState.p2, fleet: newFleet };\n                    newState.p2PlaceIndex++;\n                }\n                // No automatic phase transition - placement is concurrent\n                break;\n            }\n            case 'donePlacement': {\n                const { player } = payload;\n                // Mark player as ready\n                if (player === 1) {\n                    newState.p1Ready = true;\n                }\n                else {\n                    newState.p2Ready = true;\n                }\n                // Check if both players are ready\n                if (newState.p1Ready && newState.p2Ready) {\n                    newState.phase = 'P1_TURN'; // Start battle with Player 1's turn\n                }\n                // Add log entry for ready status\n                newState.log.push({\n                    type: 'playerReady',\n                    player,\n                    message: `Player ${player} is ready!`\n                });\n                break;\n            }\n            case 'fire': {\n                const { player, r, c } = payload;\n                const attacker = player === 1 ? newState.p1 : newState.p2;\n                const defender = player === 1 ? newState.p2 : newState.p1;\n                const result = fire(attacker.shots, defender.fleet, { r, c });\n                if (player === 1) {\n                    newState.p1 = { ...newState.p1, shots: result.attackerShots };\n                    newState.p2 = { ...newState.p2, fleet: result.defenderFleet };\n                }\n                else {\n                    newState.p2 = { ...newState.p2, shots: result.attackerShots };\n                    newState.p1 = { ...newState.p1, fleet: result.defenderFleet };\n                }\n                // Add to log\n                newState.log.push({\n                    type: 'fire',\n                    player,\n                    target: { r, c },\n                    hit: result.result.hit,\n                    sunk: result.result.sunk,\n                    win: result.result.win\n                });\n                if (result.result.win) {\n                    newState.phase = 'GAME_OVER';\n                    newState.winner = player;\n                }\n                else {\n                    // Switch turns\n                    newState.phase = player === 1 ? 'P2_TURN' : 'P1_TURN';\n                }\n                break;\n            }\n            case 'reset': {\n                return this.createInitialState();\n            }\n            case 'setName': {\n                const { player, name } = payload;\n                newState.names = { ...newState.names, [player]: name };\n                break;\n            }\n            case 'setOrientation': {\n                const { orientation } = payload;\n                newState.orientation = orientation;\n                break;\n            }\n            case 'undo': {\n                const { player } = payload;\n                // Remove the last ship from the player's fleet\n                if (player === 1) {\n                    newState.p1 = { ...newState.p1, fleet: newState.p1.fleet.slice(0, -1) };\n                    newState.p1PlaceIndex = Math.max(0, newState.p1PlaceIndex - 1);\n                }\n                else {\n                    newState.p2 = { ...newState.p2, fleet: newState.p2.fleet.slice(0, -1) };\n                    newState.p2PlaceIndex = Math.max(0, newState.p2PlaceIndex - 1);\n                }\n                break;\n            }\n        }\n        return newState;\n    }\n    broadcast(message) {\n        const data = JSON.stringify(message);\n        for (const ws of this.connections) {\n            try {\n                ws.send(data);\n            }\n            catch (error) {\n                // Remove dead connections\n                this.connections.delete(ws);\n            }\n        }\n    }\n    createInitialState() {\n        return {\n            phase: 'BOTH_PLACE',\n            p1: { fleet: [], shots: new Set() },\n            p2: { fleet: [], shots: new Set() },\n            p1PlaceIndex: 0,\n            p2PlaceIndex: 0,\n            p1Ready: false,\n            p2Ready: false,\n            orientation: 'H',\n            winner: null,\n            names: {},\n            log: []\n        };\n    }\n    serializeState(state) {\n        return {\n            ...state,\n            p1: {\n                fleet: state.p1.fleet.map(this.serializeShip),\n                shots: Array.from(state.p1.shots)\n            },\n            p2: {\n                fleet: state.p2.fleet.map(this.serializeShip),\n                shots: Array.from(state.p2.shots)\n            },\n            log: state.log.slice(-50) // Cap log to 50 entries\n        };\n    }\n    deserializeState(serialized) {\n        return {\n            ...serialized,\n            p1: {\n                fleet: serialized.p1.fleet.map(this.deserializeShip),\n                shots: new Set(serialized.p1.shots)\n            },\n            p2: {\n                fleet: serialized.p2.fleet.map(this.deserializeShip),\n                shots: new Set(serialized.p2.shots)\n            }\n        };\n    }\n    serializeShip(ship) {\n        return {\n            ...ship,\n            hits: Array.from(ship.hits)\n        };\n    }\n    deserializeShip(serialized) {\n        return {\n            ...serialized,\n            hits: new Set(serialized.hits)\n        };\n    }\n}\n", "import { GameRoom } from './game-room';\nexport default {\n    async fetch(request, env) {\n        const url = new URL(request.url);\n        if (url.pathname === '/ws') {\n            const room = url.searchParams.get('room');\n            if (!room || !/^[A-Z0-9]{6,8}$/.test(room)) {\n                return new Response('Invalid room parameter (6-8 alphanumeric characters required)', { status: 400 });\n            }\n            // Use idFromName for deterministic room codes\n            const id = env.GAME_ROOMS.idFromName(room);\n            const stub = env.GAME_ROOMS.get(id);\n            return stub.fetch(request);\n        }\n        // Health check endpoint\n        if (url.pathname === '/health') {\n            return new Response('OK', { status: 200 });\n        }\n        return new Response('Not found', { status: 404 });\n    }\n};\nexport { GameRoom };\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/worker/dist/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/node_modules/.pnpm/wrangler@4.33.2_@cloudflare+workers-types@4.20250903.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/node_modules/.pnpm/wrangler@4.33.2_@cloudflare+workers-types@4.20250903.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/worker/dist/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/worker/.wrangler/tmp/bundle-A7lEBl/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/node_modules/.pnpm/wrangler@4.33.2_@cloudflare+workers-types@4.20250903.0/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/worker/.wrangler/tmp/bundle-A7lEBl/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/gertjvr/Development/personal/naughts-and-crosses/battleships/worker/.wrangler/tmp/bundle-A7lEBl/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
